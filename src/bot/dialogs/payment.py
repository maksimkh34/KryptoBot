from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    filters,
)
from decimal import Decimal, InvalidOperation

from src.bot.middleware import require_account
from src.config.env.env import get_env_var
from src.core.account.AccountManager import account_manager
from src.core.crypto.tron.TronClient import get_fee
from src.core.crypto.tron.TronManager import tron_manager, PayResult
from src.core.currency.Amount import Amount, amount_from_trx
from src.util.logger import logger
from datetime import datetime

ADDRESS, AMOUNT, CONFIRMATION = range(3)

@require_account
async def start_payment(update: Update, context: CallbackContext):
    user = update.effective_user
    if not user:
        logger.warning("Update without effective user")
        return ConversationHandler.END

    tg_id = user.id
    logger.debug(f"User {tg_id} started /transfer")

    reply_keyboard = [["–û—Ç–º–µ–Ω–∞"]]
    markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "üëõ *–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è*:\n"
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (TRX).",
        parse_mode="Markdown",
        reply_markup=markup,
    )
    return ADDRESS


async def receive_address(update: Update, context: CallbackContext):
    tg_id = update.effective_user.id
    address = update.message.text

    if address.lower() == "–æ—Ç–º–µ–Ω–∞":
        logger.debug(f"User {tg_id} cancelled payment dialog at address step.")
        await update.message.reply_text("‚ùå –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    if not tron_manager.client.validate_address(address):
        await update.message.reply_text("üö´ *–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å*, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", parse_mode="Markdown")
        return ADDRESS

    context.user_data["address"] = address
    await update.message.reply_text(
        "üí∏ *–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (TRX)*:\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ TRX –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True),
    )
    return AMOUNT


async def receive_amount(update: Update, context: CallbackContext):
    user = update.effective_user
    tg_id = user.id
    amount_input = update.message.text.strip()

    if amount_input.lower() == "–æ—Ç–º–µ–Ω–∞":
        logger.info(f"User {tg_id} cancelled payment dialog at amount step.")
        await update.message.reply_text("‚ùå *–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω*", parse_mode="Markdown",
                                        reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    try:
        amount_trx = Decimal(amount_input)
        if amount_trx <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")

        amount = amount_from_trx(amount_trx)
        address = context.user_data["address"]

        try:
            _, fee_amount = tron_manager.choose_wallet(amount)
        except ValueError:
            msg = (
                f"‚ùå *–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω*. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.\n"
                f"–ù—É–∂–Ω–æ: {amount.format_trx()} TRX\n"
                f"–ë–∞–ª–∞–Ω—Å: {tron_manager.get_max_payment_amount()} TRX"
            )
            await update.message.reply_text(
                msg,
                parse_mode="Markdown",
                reply_markup=ReplyKeyboardRemove(),
            )
            admin_id = get_env_var("ADMIN_ID")
            await context.bot.send_message(
                chat_id=admin_id,
                text=msg,
                parse_mode="Markdown"
            )
            logger.error("Not enough balance: " + amount.format_trx())
            return ConversationHandler.END

        total_amount_to_pay = Amount(byn=(amount.get_byn_amount() + fee_amount.get_byn_amount()))

        context.user_data["payment_amount"] = amount
        context.user_data["total_amount_to_pay"] = total_amount_to_pay

        if not account_manager.can_pay(tg_id, total_amount_to_pay):
            await update.message.reply_text(
                f"‚ùå *–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω*. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.\n"
                f"–ù—É–∂–Ω–æ: {total_amount_to_pay.get_byn_amount():.2f} BYN\n"
                f"–ë–∞–ª–∞–Ω—Å: {account_manager.get_byn_balance(tg_id):.2f} BYN",
                parse_mode="Markdown",
                reply_markup=ReplyKeyboardRemove(),
            )
            return ConversationHandler.END

        await update.message.reply_text(
            "‚úÖ *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥*:\n\n"
            f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: `{address}`\n"
            f"–°—É–º–º–∞: *{amount.get_byn_amount():.2f} BYN*\n"
            f"–ö–æ–º–∏—Å—Å–∏—è: *{fee_amount.get_byn_amount():.2f} BYN*\n\n"
            f"–í—Å–µ–≥–æ: *{total_amount_to_pay.get_byn_amount():.2f} BYN*\n"
            f"–ë—É–¥–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: *{amount_input} TRX*\n",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"], ["OK"]], resize_keyboard=True),
        )
        return CONFIRMATION

    except (ValueError, InvalidOperation) as e:
        logger.warning(f"User {tg_id} entered invalid amount: {amount_input}. Error: {e}")
        await update.message.reply_text(
            "‚ùå *–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞*. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: `12.5`",
            parse_mode="Markdown",
        )
        return AMOUNT

async def confirm_transaction(update: Update, context: CallbackContext) -> int:
    user = update.effective_user
    tg_id = user.id
    confirmation = update.message.text.strip().lower()

    if confirmation not in ["ok", "–æ—Ç–º–µ–Ω–∞"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ *–û—Ç–º–µ–Ω–∞* –∏–ª–∏ *OK*.", parse_mode="Markdown")
        return CONFIRMATION

    if confirmation == "–æ—Ç–º–µ–Ω–∞":
        logger.info(f"User {tg_id} cancelled payment at confirmation step.")
        await update.message.reply_text("–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    address = context.user_data["address"]
    payment_amount: Amount = context.user_data["payment_amount"]
    total_amount_to_pay: Amount = context.user_data["total_amount_to_pay"]

    if not account_manager.subtract_from_balance(tg_id, total_amount_to_pay):
        await update.message.reply_text(
            f"‚ùå *–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω*. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {account_manager.get_byn_balance(tg_id):.2f} BYN",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardRemove(),
        )
        return ConversationHandler.END

    pay_result = tron_manager.pay(address, payment_amount)

    if pay_result == PayResult.NOT_ENOUGH_BALANCE:
        logger.critical(
            f"CRITICAL: Not enough funds on service wallets for payment! Amount: {payment_amount}. User: {tg_id}")
        account_manager.add_to_balance(tg_id, total_amount_to_pay)
        await update.message.reply_text(
            "‚ùå *–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞*. –ù–∞ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardRemove(),
        )
        return ConversationHandler.END

    logger.info(f"Transaction confirmed for user {tg_id}: {payment_amount.format_trx()} TRX to {address}")

    await update.message.reply_text(
        f"‚úÖ *–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω*\n\n"
        f"–°—É–º–º–∞: {payment_amount.format_trx()} TRX\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {address}\n"
        f"–ë–∞–ª–∞–Ω—Å: *{account_manager.get_byn_balance(tg_id):.2f} BYN*",
        parse_mode="Markdown",
        reply_markup=ReplyKeyboardRemove(),
    )

    admin_id = get_env_var("ADMIN_ID")
    admin_message = (
        f"üîî *–ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ üîî*\n\n"
        f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: `{tg_id}`\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: `{address}`\n"
        f"–°—É–º–º–∞: *{context.user_data['total_amount_to_pay']} BYN*\n"
        f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} \n\n"
    )
    sent_message = await context.bot.send_message(
        chat_id=admin_id,
        text=admin_message,
        parse_mode="Markdown"
    )
    await context.bot.pin_chat_message(chat_id=admin_id,
                                       message_id=sent_message.message_id, disable_notification=True)

    return ConversationHandler.END


async def cancel(update: Update, context: CallbackContext) -> int:
    user = update.effective_user
    logger.info(f"User {user.id} cancelled the conversation.")
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardRemove(),
    )
    return ConversationHandler.END


def get_payment_conversation():
    return ConversationHandler(
        entry_points=[CommandHandler("payment", start_payment)],
        states={
            ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_address)],
            AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_amount)],
            CONFIRMATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_transaction)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
