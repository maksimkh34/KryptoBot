from telegram import Bot
from src.config import load_config
from src.data import storage
from src.data.utils import round_byn
from typing import Optional
from tronpy.keys import PrivateKey
from datetime import datetime

async def send_payment_receipt(
    bot: Bot,
    payment_data: dict,
    txid: str,
    username: str,
    from_address: str,
    commission: float,
    total_amount: float
) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram Bot.
        payment_data: –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ (currency, wallet, amount).
        txid: ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
        from_address: –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.
        commission: –ö–æ–º–∏—Å—Å–∏—è –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.
        total_amount: –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ (amount + commission).
    """
    config = load_config()
    admin_id = config["ADMIN_ID"]
    settings = storage.load_file(storage.SETTINGS)
    currency = payment_data["currency"]
    currency_info = next((c for c in settings.get("currencies", []) if c["code"] == currency), None)
    currency_name = currency_info["name"] if currency_info else currency
    rate_key = currency_info["rate_key"] if currency_info else "trx_rate"
    byn_amount = round_byn(payment_data["amount"] * settings.get(rate_key, config["TRX_RATE"]))

    commission_note = f"\n–í–∫–ª—é—á–µ–Ω–∞ –∫–æ–º–∏—Å—Å–∏—è: {commission} {currency_name}" if commission > 0 else ""
    message = (
        f"üÜï –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ ({currency_name}):\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
        f"üì§ –° –∫–æ—à–µ–ª—å–∫–∞: `{from_address}`\n"
        f"üì• –ù–∞ –∫–æ—à–µ–ª–µ–∫: `{payment_data['wallet']}`\n"
        f"üí∞ –°—É–º–º–∞: {payment_data['amount']} {currency_name}\n"
        f"üí∏ –ö–æ–º–∏—Å—Å–∏—è: {commission} {currency_name}\n"
        f"‚û°Ô∏è –ò—Ç–æ–≥–æ: {total_amount} {currency_name}\n"
        f"üíµ –°—É–º–º–∞ BYN: {byn_amount}\n"
        f"üîó TXID: `{txid}`{commission_note}"
    )
    await bot.send_message(chat_id=admin_id, text=message, parse_mode="Markdown")

async def send_payment_failure(
    bot: Bot,
    payment_data: dict,
    error: str,
    username: str,
    from_address: Optional[str] = None,
    commission: float = 0,
    total_amount: float = 0
) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ–± –æ—à–∏–±–∫–µ –ø–ª–∞—Ç–µ–∂–∞.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram Bot.
        payment_data: –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞.
        error: –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏.
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
        from_address: –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).
        commission: –ö–æ–º–∏—Å—Å–∏—è –∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.
        total_amount: –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ (amount + commission).
    """
    config = load_config()
    admin_id = config["ADMIN_ID"]
    settings = storage.load_file(storage.SETTINGS)
    currency = payment_data["currency"]
    currency_info = next((c for c in settings.get("currencies", []) if c["code"] == currency), None)
    currency_name = currency_info["name"] if currency_info else currency
    rate_key = currency_info["rate_key"] if currency_info else "trx_rate"
    byn_amount = round_byn(payment_data["amount"] * settings.get(rate_key, config["TRX_RATE"]))

    commission_note = f"\n–í–∫–ª—é—á–µ–Ω–∞ –∫–æ–º–∏—Å—Å–∏—è: {commission} {currency_name}" if commission > 0 else ""
    message = (
        f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞!\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
        f"üì§ –° –∫–æ—à–µ–ª—å–∫–∞: `{from_address or '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}`\n"
        f"üì• –ù–∞ –∫–æ—à–µ–ª–µ–∫: `{payment_data['wallet']}`\n"
        f"üí∞ –°—É–º–º–∞: {payment_data['amount']} {currency_name}\n"
        f"üí∏ –ö–æ–º–∏—Å—Å–∏—è: {commission} {currency_name}\n"
        f"‚û°Ô∏è –ò—Ç–æ–≥–æ: {total_amount} {currency_name}\n"
        f"üíµ –°—É–º–º–∞ BYN: {byn_amount}\n"
        f"üö´ –û—à–∏–±–∫–∞: {error}{commission_note}"
    )
    await bot.send_message(chat_id=admin_id, text=message, parse_mode="Markdown")

async def send_insufficient_funds(bot: Bot, payment_data: dict, username: str) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram Bot.
        payment_data: –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞.
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
    """
    from src.crypto.factory import get_wallet_class

    config = load_config()
    admin_id = config["ADMIN_ID"]
    settings = storage.load_file(storage.SETTINGS)
    currency = payment_data["currency"]
    currency_info = next((c for c in settings.get("currencies", []) if c["code"] == currency), None)
    currency_name = currency_info["name"] if currency_info else currency
    rate_key = currency_info["rate_key"] if currency_info else "trx_rate"
    byn_amount = round_byn(payment_data["amount"] * settings.get(rate_key, config["TRX_RATE"]))

    wallet_class = get_wallet_class(currency_info["wallet_class"] if currency_info else "TronWallet")
    wallet = wallet_class()
    wallets = storage.load_file(storage.WALLETS).get("active", [])
    wallets_info = []
    for w in wallets:
        try:
            priv_key = w["private_key"]
            address = PrivateKey(bytes.fromhex(priv_key)).public_key.to_base58check_address()
            balance = wallet.get_balance(address)
            bandwidth = wallet.estimate_bandwidth_usage(address)
            wallets_info.append(f"‚ñ™ `{address}`: {balance:.2f} {currency} | BW: {bandwidth}")
        except Exception:
            continue

    message = (
        f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø–ª–∞—Ç—ã!\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
        f"üí∏ –í–∞–ª—é—Ç–∞: @{currency_name}\n"
        f"üì• –ù–∞ –∫–æ—à–µ–ª–µ–∫: `{payment_data['wallet']}`\n"
        f"üí∞ –¢—Ä–µ–±—É–µ–º–∞—è —Å—É–º–º–∞ {currency}: {payment_data['amount']}\n"
        f"üíµ –°—É–º–º–∞ BYN: {byn_amount}\n"
        f"–ë–∞–ª–∞–Ω—Å—ã –∫–æ—à–µ–ª—å–∫–æ–≤:\n" + "\n".join(wallets_info)
    )
    await bot.send_message(chat_id=admin_id, text=message, parse_mode="Markdown")

async def send_key_activation_notification(bot: Bot, username: str, user_id: str, key: str) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram Bot.
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        key: –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á.
    """
    config = load_config()
    admin_id = config["ADMIN_ID"]
    message = (
        f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∫–ª—é—á!\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
        f"üîë –ö–ª—é—á: `{key}`\n"
        f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
    )
    await bot.send_message(chat_id=admin_id, text=message, parse_mode="Markdown")
